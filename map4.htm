<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Celestial + Dummy Constellation Lines</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { margin: 0; background: #000; color: #eee; font-family: sans-serif; }
    #controls { position: fixed; top: 10px; left: 10px; background: rgba(0,0,0,0.6); padding: 10px; border-radius: 5px; z-index: 1; }
    #sky { width: 100vw; height: 100vh; }
    .star { fill: white; }
    .mw { fill: rgba(255,255,255,0.1); }
    .constLine { stroke: rgba(0,200,255,0.6); stroke-width: 1.2; fill: none; }
    .constLabel { fill: #0ff; font-size: 12px; }
  </style>
</head>
<body>
  <div id="controls">
    <label><input type="checkbox" id="showConstLines" checked /> Show Constellation Lines</label>
    <br>
    <label><input type="checkbox" id="showConstLabels" checked /> Show Constellation Labels</label>
  </div>
  <svg id="sky" viewBox="0 0 600 600"></svg>

  <script>
    const svg = document.getElementById('sky');
    const WIDTH = 600, HEIGHT = 600;
    const URL_STARS = 'https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/stars.6.json';
    const URL_MW = 'https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/mw.json';

    // Constellation labels from your JSON
    const constLabelsData = {
      "type":"FeatureCollection","features":[
        {"type":"Feature","id":"And","properties":{"name":"Andromeda"},"geometry":{"type":"Point","coordinates":[0.75,43]}},
        {"type":"Feature","id":"Ant","properties":{"name":"Antlia"},"geometry":{"type":"Point","coordinates":[156,-36]}},
        {"type":"Feature","id":"Aps","properties":{"name":"Apus"},"geometry":{"type":"Point","coordinates":[-120,-74]}},
        {"type":"Feature","id":"Aqr","properties":{"name":"Aquarius"},"geometry":{"type":"Point","coordinates":[-22.5,-5]}}
      ]
    };

    // Dummy constellation lines (replace with real data later)
    // Each entry is {from: [lon,lat], to: [lon,lat]}
    const constLinesData = [
      { from: [0.75,43], to: [156,-36] },
      { from: [156,-36], to: [-120,-74] },
      { from: [-120,-74], to: [-22.5,-5] },
      { from: [-22.5,-5], to: [0.75,43] }
    ];

    function raDecToXY(lon, lat) {
      const x = (lon + 180) / 360 * WIDTH;
      const y = HEIGHT - (lat + 90) / 180 * HEIGHT;
      return { x, y };
    }

    async function render() {
      const [starsRes, mwRes] = await Promise.all([fetch(URL_STARS), fetch(URL_MW)]);
      const starsJson = await starsRes.json();
      const mwJson = await mwRes.json();

      // Stars
      for (const f of starsJson.features) {
        const [lon, lat] = f.geometry.coordinates;
        const { x, y } = raDecToXY(lon, lat);
        const c = document.createElementNS('http://www.w3.org/2000/svg','circle');
        c.setAttribute('cx', x);
        c.setAttribute('cy', y);
        c.setAttribute('r', 1);
        c.setAttribute('class', 'star');
        svg.appendChild(c);
      }

      // Milky Way
      for (const feat of mwJson.features) {
        for (const poly of feat.geometry.coordinates) {
          for (const ring of poly) {
            let d = '';
            ring.forEach((pt, i) => {
              const { x, y } = raDecToXY(pt[0], pt[1]);
              d += (i === 0 ? `M${x},${y}` : `L${x},${y}`);
            });
            d += 'Z';
            const path = document.createElementNS('http://www.w3.org/2000/svg','path');
            path.setAttribute('d', d);
            path.setAttribute('class','mw');
            svg.appendChild(path);
          }
        }
      }

      // Constellation Labels
      constLabelsData.features.forEach(f => {
        const name = f.properties.name;
        const [lon, lat] = f.geometry.coordinates;
        const { x, y } = raDecToXY(lon, lat);
        const text = document.createElementNS('http://www.w3.org/2000/svg','text');
        text.setAttribute('x', x + 2);
        text.setAttribute('y', y - 2);
        text.setAttribute('class','constLabel');
        text.textContent = name;
        text.dataset.label = name;
        svg.appendChild(text);
      });

      // Constellation Lines
      constLinesData.forEach(seg => {
        const a = raDecToXY(seg.from[0], seg.from[1]);
        const b = raDecToXY(seg.to[0], seg.to[1]);
        const line = document.createElementNS('http://www.w3.org/2000/svg','line');
        line.setAttribute('x1', a.x);
        line.setAttribute('y1', a.y);
        line.setAttribute('x2', b.x);
        line.setAttribute('y2', b.y);
        line.setAttribute('class','constLine');
        svg.appendChild(line);
      });

      // Toggle functionality
      document.getElementById('showConstLabels').addEventListener('change', e => {
        const texts = svg.querySelectorAll('text.constLabel');
        texts.forEach(t => t.style.display = e.target.checked ? '' : 'none');
      });
      document.getElementById('showConstLines').addEventListener('change', e => {
        const lines = svg.querySelectorAll('line.constLine');
        lines.forEach(l => l.style.display = e.target.checked ? '' : 'none');
      });
    }

    render();
  </script>
</body>
</html>
